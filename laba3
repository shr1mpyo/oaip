#include <iostream>
#include <queue>

using namespace std;

// объединение упорядоченных очередей
queue<int> mergeQueues(queue<int> q1, queue<int> q2) {
    queue<int> mergedQueue;

    // пока обе очереди не пусты
    while (!q1.empty() && !q2.empty()) {
        // выбираем минимальный элемент из очередей
        if (q1.front() <= q2.front()) {
            mergedQueue.push(q1.front());
            q1.pop();
        }
        else {
            mergedQueue.push(q2.front());
            q2.pop();
        }
    }

    // если первая очередь не пуста
    while (!q1.empty()) {
        mergedQueue.push(q1.front());
        q1.pop();
    }

    // если вторая очередь не пуста
    while (!q2.empty()) {
        mergedQueue.push(q2.front());
        q2.pop();
    }

    return mergedQueue;
}

int main() {
    setlocale(LC_ALL, "Russian");
    queue<int> q1, q2;
    int n, m;

    // ввод данных первой очереди
    cout << "Введите количество элементов в первой очереди: ";
    cin >> n;
    cout << "Введите элементы первой очереди: ";
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        q1.push(x);
    }

    // ввод данных второй очереди
    cout << "Введите количество элементов во второй очереди: ";
    cin >> m;
    cout << "Введите элементы второй очереди: ";
    for (int i = 0; i < m; i++) {
        int x;
        cin >> x;
        q2.push(x);
    }

    // объединение упорядоченных очередей
    queue<int> mergedQueue = mergeQueues(q1, q2);

    // вывод объединенной очереди
    cout << "Объединенная очередь: ";
    while (!mergedQueue.empty()) {
        cout << mergedQueue.front() << " ";
        mergedQueue.pop();
    }

    return 0;
}
